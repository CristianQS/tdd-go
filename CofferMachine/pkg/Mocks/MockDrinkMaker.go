// Code generated by MockGen. DO NOT EDIT.
// Source: Infraestructure/DrinkMaker.go

// Package mock_Infraestructure is a generated GoMock package.
package Mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDrinkMaker is a mock of DrinkMaker interface.
type MockDrinkMaker struct {
	ctrl     *gomock.Controller
	recorder *MockDrinkMakerMockRecorder
}

// MockDrinkMakerMockRecorder is the mock recorder for MockDrinkMaker.
type MockDrinkMakerMockRecorder struct {
	mock *MockDrinkMaker
}

// NewMockDrinkMaker creates a new mock instance.
func NewMockDrinkMaker(ctrl *gomock.Controller) *MockDrinkMaker {
	mock := &MockDrinkMaker{ctrl: ctrl}
	mock.recorder = &MockDrinkMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrinkMaker) EXPECT() *MockDrinkMakerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDrinkMaker) Execute(command string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", command)
}

// Execute indicates an expected call of Execute.
func (mr *MockDrinkMakerMockRecorder) Execute(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDrinkMaker)(nil).Execute), command)
}
