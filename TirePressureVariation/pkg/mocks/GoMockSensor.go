// Code generated by MockGen. DO NOT EDIT.
// Source: ISensor.go

// Package mock_pkg is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISensor is a mock of ISensor interface.
type MockISensor struct {
	ctrl     *gomock.Controller
	recorder *MockISensorMockRecorder
}

// MockISensorMockRecorder is the mock recorder for MockISensor.
type MockISensorMockRecorder struct {
	mock *MockISensor
}

// NewMockISensor creates a new mock instance.
func NewMockISensor(ctrl *gomock.Controller) *MockISensor {
	mock := &MockISensor{ctrl: ctrl}
	mock.recorder = &MockISensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISensor) EXPECT() *MockISensorMockRecorder {
	return m.recorder
}

// PopNextPressurePsiValue mocks base method.
func (m *MockISensor) PopNextPressurePsiValue() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopNextPressurePsiValue")
	ret0, _ := ret[0].(float32)
	return ret0
}

// PopNextPressurePsiValue indicates an expected call of PopNextPressurePsiValue.
func (mr *MockISensorMockRecorder) PopNextPressurePsiValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopNextPressurePsiValue", reflect.TypeOf((*MockISensor)(nil).PopNextPressurePsiValue))
}
