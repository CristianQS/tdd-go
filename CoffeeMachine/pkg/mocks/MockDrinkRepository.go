// Code generated by MockGen. DO NOT EDIT.
// Source: DrinkRepository.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	"CofferMachine/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDrinkRepository is a mock of DrinkRepository interface.
type MockDrinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDrinkRepositoryMockRecorder
}

// MockDrinkRepositoryMockRecorder is the mock recorder for MockDrinkRepository.
type MockDrinkRepositoryMockRecorder struct {
	mock *MockDrinkRepository
}

// NewMockDrinkRepository creates a new mock instance.
func NewMockDrinkRepository(ctrl *gomock.Controller) *MockDrinkRepository {
	mock := &MockDrinkRepository{ctrl: ctrl}
	mock.recorder = &MockDrinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrinkRepository) EXPECT() *MockDrinkRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDrinkRepository) Add(order *model.Drink) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", order)
}

// Add indicates an expected call of Add.
func (mr *MockDrinkRepositoryMockRecorder) Add(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDrinkRepository)(nil).Add), order)
}

// GetDrinks mocks base method.
func (m *MockDrinkRepository) GetDrinks() map[*model.Drink]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrinks")
	ret0, _ := ret[0].(map[*model.Drink]int)
	return ret0
}

// GetDrinks indicates an expected call of GetDrinks.
func (mr *MockDrinkRepositoryMockRecorder) GetDrinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrinks", reflect.TypeOf((*MockDrinkRepository)(nil).GetDrinks))
}
