// Code generated by MockGen. DO NOT EDIT.
// Source: BeverageQuantityChecker.go

// Package mock_infraestructure is a generated GoMock package.
package infraestructure

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBeverageQuantityChecker is a mock of BeverageQuantityChecker interface.
type MockBeverageQuantityChecker struct {
	ctrl     *gomock.Controller
	recorder *MockBeverageQuantityCheckerMockRecorder
}

// MockBeverageQuantityCheckerMockRecorder is the mock recorder for MockBeverageQuantityChecker.
type MockBeverageQuantityCheckerMockRecorder struct {
	mock *MockBeverageQuantityChecker
}

// NewMockBeverageQuantityChecker creates a new mock instance.
func NewMockBeverageQuantityChecker(ctrl *gomock.Controller) *MockBeverageQuantityChecker {
	mock := &MockBeverageQuantityChecker{ctrl: ctrl}
	mock.recorder = &MockBeverageQuantityCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeverageQuantityChecker) EXPECT() *MockBeverageQuantityCheckerMockRecorder {
	return m.recorder
}

// IsEmpty mocks base method.
func (m *MockBeverageQuantityChecker) IsEmpty(drink string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty", drink)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockBeverageQuantityCheckerMockRecorder) IsEmpty(drink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockBeverageQuantityChecker)(nil).IsEmpty), drink)
}
